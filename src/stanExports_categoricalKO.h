// Generated by rstantools.  Do not edit by hand.

/*
    BayesianKnockoff is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesianKnockoff is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesianKnockoff.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_categoricalKO_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_categoricalKO");
    reader.add_event(54, 52, "end", "model_categoricalKO");
    return reader;
}
#include <stan_meta_header.hpp>
class model_categoricalKO
  : public stan::model::model_base_crtp<model_categoricalKO> {
private:
        int N;
        int lengthZ;
        int contNum;
        int contNumReal;
        int cateNum;
        int cateDummyNum;
        std::vector<int> cumCateDummyNum;
        std::vector<int> cumCateDummyNumInter;
        vector_d mu0;
        matrix_d tau0;
        matrix_d contX;
        std::vector<std::vector<int> > cateX;
public:
    model_categoricalKO(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_categoricalKO(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_categoricalKO_namespace::model_categoricalKO";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "lengthZ", "int", context__.to_vec());
            lengthZ = int(0);
            vals_i__ = context__.vals_i("lengthZ");
            pos__ = 0;
            lengthZ = vals_i__[pos__++];
            check_greater_or_equal(function__, "lengthZ", lengthZ, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "contNum", "int", context__.to_vec());
            contNum = int(0);
            vals_i__ = context__.vals_i("contNum");
            pos__ = 0;
            contNum = vals_i__[pos__++];
            check_greater_or_equal(function__, "contNum", contNum, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "contNumReal", "int", context__.to_vec());
            contNumReal = int(0);
            vals_i__ = context__.vals_i("contNumReal");
            pos__ = 0;
            contNumReal = vals_i__[pos__++];
            check_greater_or_equal(function__, "contNumReal", contNumReal, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "cateNum", "int", context__.to_vec());
            cateNum = int(0);
            vals_i__ = context__.vals_i("cateNum");
            pos__ = 0;
            cateNum = vals_i__[pos__++];
            check_greater_or_equal(function__, "cateNum", cateNum, 1);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "cateDummyNum", "int", context__.to_vec());
            cateDummyNum = int(0);
            vals_i__ = context__.vals_i("cateDummyNum");
            pos__ = 0;
            cateDummyNum = vals_i__[pos__++];
            check_greater_or_equal(function__, "cateDummyNum", cateDummyNum, 1);
            current_statement_begin__ = 11;
            validate_non_negative_index("cumCateDummyNum", "(cateNum + 1)", (cateNum + 1));
            context__.validate_dims("data initialization", "cumCateDummyNum", "int", context__.to_vec((cateNum + 1)));
            cumCateDummyNum = std::vector<int>((cateNum + 1), int(0));
            vals_i__ = context__.vals_i("cumCateDummyNum");
            pos__ = 0;
            size_t cumCateDummyNum_k_0_max__ = (cateNum + 1);
            for (size_t k_0__ = 0; k_0__ < cumCateDummyNum_k_0_max__; ++k_0__) {
                cumCateDummyNum[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("cumCateDummyNumInter", "(cateNum + 1)", (cateNum + 1));
            context__.validate_dims("data initialization", "cumCateDummyNumInter", "int", context__.to_vec((cateNum + 1)));
            cumCateDummyNumInter = std::vector<int>((cateNum + 1), int(0));
            vals_i__ = context__.vals_i("cumCateDummyNumInter");
            pos__ = 0;
            size_t cumCateDummyNumInter_k_0_max__ = (cateNum + 1);
            for (size_t k_0__ = 0; k_0__ < cumCateDummyNumInter_k_0_max__; ++k_0__) {
                cumCateDummyNumInter[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("mu0", "lengthZ", lengthZ);
            context__.validate_dims("data initialization", "mu0", "vector_d", context__.to_vec(lengthZ));
            mu0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(lengthZ);
            vals_r__ = context__.vals_r("mu0");
            pos__ = 0;
            size_t mu0_j_1_max__ = lengthZ;
            for (size_t j_1__ = 0; j_1__ < mu0_j_1_max__; ++j_1__) {
                mu0(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("tau0", "lengthZ", lengthZ);
            validate_non_negative_index("tau0", "lengthZ", lengthZ);
            context__.validate_dims("data initialization", "tau0", "matrix_d", context__.to_vec(lengthZ,lengthZ));
            tau0 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(lengthZ, lengthZ);
            vals_r__ = context__.vals_r("tau0");
            pos__ = 0;
            size_t tau0_j_2_max__ = lengthZ;
            size_t tau0_j_1_max__ = lengthZ;
            for (size_t j_2__ = 0; j_2__ < tau0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < tau0_j_1_max__; ++j_1__) {
                    tau0(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("contX", "N", N);
            validate_non_negative_index("contX", "contNum", contNum);
            context__.validate_dims("data initialization", "contX", "matrix_d", context__.to_vec(N,contNum));
            contX = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, contNum);
            vals_r__ = context__.vals_r("contX");
            pos__ = 0;
            size_t contX_j_2_max__ = contNum;
            size_t contX_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < contX_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < contX_j_1_max__; ++j_1__) {
                    contX(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("cateX", "N", N);
            validate_non_negative_index("cateX", "cateNum", cateNum);
            context__.validate_dims("data initialization", "cateX", "int", context__.to_vec(N,cateNum));
            cateX = std::vector<std::vector<int> >(N, std::vector<int>(cateNum, int(0)));
            vals_i__ = context__.vals_i("cateX");
            pos__ = 0;
            size_t cateX_k_0_max__ = N;
            size_t cateX_k_1_max__ = cateNum;
            for (size_t k_1__ = 0; k_1__ < cateX_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < cateX_k_0_max__; ++k_0__) {
                    cateX[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t cateX_i_0_max__ = N;
            size_t cateX_i_1_max__ = cateNum;
            for (size_t i_0__ = 0; i_0__ < cateX_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < cateX_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "cateX[i_0__][i_1__]", cateX[i_0__][i_1__], 1);
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            validate_non_negative_index("Z", "lengthZ", lengthZ);
            num_params_r__ += lengthZ;
            current_statement_begin__ = 21;
            validate_non_negative_index("Sigma", "lengthZ", lengthZ);
            validate_non_negative_index("Sigma", "lengthZ", lengthZ);
            num_params_r__ += (lengthZ + ((lengthZ * (lengthZ - 1)) / 2));
            current_statement_begin__ = 22;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_categoricalKO() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 20;
        if (!(context__.contains_r("Z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Z");
        pos__ = 0U;
        validate_non_negative_index("Z", "lengthZ", lengthZ);
        context__.validate_dims("parameter initialization", "Z", "vector_d", context__.to_vec(lengthZ));
        Eigen::Matrix<double, Eigen::Dynamic, 1> Z(lengthZ);
        size_t Z_j_1_max__ = lengthZ;
        for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
            Z(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(-(6.0), 6.0, Z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("Sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Sigma");
        pos__ = 0U;
        validate_non_negative_index("Sigma", "lengthZ", lengthZ);
        validate_non_negative_index("Sigma", "lengthZ", lengthZ);
        context__.validate_dims("parameter initialization", "Sigma", "matrix_d", context__.to_vec(lengthZ,lengthZ));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma(lengthZ, lengthZ);
        size_t Sigma_j_2_max__ = lengthZ;
        size_t Sigma_j_1_max__ = lengthZ;
        for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                Sigma(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(Sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 20;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Z;
            (void) Z;  // dummy to suppress unused var warning
            if (jacobian__)
                Z = in__.vector_lub_constrain(-(6.0), 6.0, lengthZ, lp__);
            else
                Z = in__.vector_lub_constrain(-(6.0), 6.0, lengthZ);
            current_statement_begin__ = 21;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma;
            (void) Sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                Sigma = in__.cov_matrix_constrain(lengthZ, lp__);
            else
                Sigma = in__.cov_matrix_constrain(lengthZ);
            current_statement_begin__ = 22;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 26;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("theta", "cateDummyNum", cateDummyNum);
            std::vector<local_scalar_t__> theta(cateDummyNum, local_scalar_t__(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 29;
            for (int i = 1; i <= cateNum; ++i) {
                current_statement_begin__ = 30;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni((1 + get_base1(cumCateDummyNum, i, "cumCateDummyNum", 1))), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable theta");
                current_statement_begin__ = 31;
                for (int j = 2; j <= (get_base1(cumCateDummyNum, (i + 1), "cumCateDummyNum", 1) - get_base1(cumCateDummyNum, i, "cumCateDummyNum", 1)); ++j) {
                    current_statement_begin__ = 32;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((j + get_base1(cumCateDummyNum, i, "cumCateDummyNum", 1))), stan::model::nil_index_list()), 
                                get_base1(Z, (((j - 1) + get_base1(cumCateDummyNumInter, i, "cumCateDummyNumInter", 1)) + contNumReal), "Z", 1), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 35;
            stan::math::assign(sigma, inv_sqrt(tau));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 26;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 27;
            size_t theta_k_0_max__ = cateDummyNum;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(theta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 39;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 40;
                if (as_bool(logical_gt(contNumReal, 0))) {
                    current_statement_begin__ = 41;
                    for (int s = 1; s <= contNum; ++s) {
                        current_statement_begin__ = 42;
                        lp_accum__.add(normal_log<propto__>(get_base1(contX, n, s, "contX", 1), get_base1(Z, s, "Z", 1), sigma));
                    }
                }
                current_statement_begin__ = 45;
                for (int i = 1; i <= cateNum; ++i) {
                    current_statement_begin__ = 46;
                    lp_accum__.add(categorical_logit_log<propto__>(get_base1(get_base1(cateX, n, "cateX", 1), i, "cateX", 2), to_vector(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max((1 + get_base1(cumCateDummyNum, i, "cumCateDummyNum", 1)), get_base1(cumCateDummyNum, (i + 1), "cumCateDummyNum", 1)), stan::model::nil_index_list()), "theta"))));
                }
            }
            current_statement_begin__ = 49;
            lp_accum__.add(multi_normal_prec_log<propto__>(Z, mu0, Sigma));
            current_statement_begin__ = 50;
            lp_accum__.add(wishart_log<propto__>(Sigma, lengthZ, tau0));
            current_statement_begin__ = 51;
            lp_accum__.add(gamma_log<propto__>(tau, 0.001, 0.001));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Z");
        names__.push_back("Sigma");
        names__.push_back("tau");
        names__.push_back("sigma");
        names__.push_back("theta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(lengthZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(lengthZ);
        dims__.push_back(lengthZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(cateDummyNum);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_categoricalKO_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> Z = in__.vector_lub_constrain(-(6.0), 6.0, lengthZ);
        size_t Z_j_1_max__ = lengthZ;
        for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
            vars__.push_back(Z(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma = in__.cov_matrix_constrain(lengthZ);
        size_t Sigma_j_2_max__ = lengthZ;
        size_t Sigma_j_1_max__ = lengthZ;
        for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                vars__.push_back(Sigma(j_1__, j_2__));
            }
        }
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 26;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("theta", "cateDummyNum", cateDummyNum);
            std::vector<double> theta(cateDummyNum, double(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 29;
            for (int i = 1; i <= cateNum; ++i) {
                current_statement_begin__ = 30;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni((1 + get_base1(cumCateDummyNum, i, "cumCateDummyNum", 1))), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable theta");
                current_statement_begin__ = 31;
                for (int j = 2; j <= (get_base1(cumCateDummyNum, (i + 1), "cumCateDummyNum", 1) - get_base1(cumCateDummyNum, i, "cumCateDummyNum", 1)); ++j) {
                    current_statement_begin__ = 32;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((j + get_base1(cumCateDummyNum, i, "cumCateDummyNum", 1))), stan::model::nil_index_list()), 
                                get_base1(Z, (((j - 1) + get_base1(cumCateDummyNumInter, i, "cumCateDummyNumInter", 1)) + contNumReal), "Z", 1), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 35;
            stan::math::assign(sigma, inv_sqrt(tau));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 26;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(sigma);
                size_t theta_k_0_max__ = cateDummyNum;
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    vars__.push_back(theta[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_categoricalKO";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Z_j_1_max__ = lengthZ;
        for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Sigma_j_2_max__ = lengthZ;
        size_t Sigma_j_1_max__ = lengthZ;
        for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t theta_k_0_max__ = cateDummyNum;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Z_j_1_max__ = lengthZ;
        for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Sigma_j_1_max__ = (lengthZ + ((lengthZ * (lengthZ - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t theta_k_0_max__ = cateDummyNum;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_categoricalKO_namespace::model_categoricalKO stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
